dnl #
dnl #  Copyright (C) 1999, 2000 James Antill
dnl #
dnl #  This program is free software; you can redistribute it and/or modify
dnl #  it under the terms of the GNU General Public License as published by
dnl #  the Free Software Foundation; either version 2 of the License, or
dnl #  (at your option) any later version.
dnl #
dnl #  This program is distributed in the hope that it will be useful,
dnl #  but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl #  GNU General Public License for more details.
dnl #
dnl #  You should have received a copy of the GNU General Public License
dnl #  along with this program; if not, write to the Free Software
dnl #  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
dnl #
dnl # email: james@and.org
dnl #


dnl Configure script...
dnl

AC_INIT(include/socket_poll.h)

AC_PREREQ(2.12)dnl
AC_REVISION(1.0)


AM_CONFIG_HEADER(include/autoconf.h)


dnl define a msg macro...

define(TWOCAN_CONF_MSG,[dnl
AC_MSG_RESULT()
AC_MSG_RESULT(${T_MD}$1:${T_ME})
])dnl




# Scary shtool stuff... borowed from pth-1.0
if test ".`echo dummy $@ | grep help`" = .; then
    SHTOOL="\$(TOP)/shtool"
    AC_SUBST(SHTOOL)
    ac_shtool="./shtool"
    T_MD="`$ac_shtool echo -n -e %B 2>/dev/null`"
    T_ME="`$ac_shtool echo -n -e %b 2>/dev/null`"
    echo "Configuring ${T_MD}socket_poll${T_ME}, (Library)${T_ME}"
    echo "Copyright (c) 1999, 2000 James Antill <james@and.org>"
    echo "                   See ${T_MD}AUTHORS${T_ME} file for more info."

# Could just del this, but it looks cool and like I know what I'm doing :)
    PLATFORM=`$ac_shtool guessos`
    echo "Platform: ${T_MD}${PLATFORM}${T_ME}"
fi

TWOCAN_CONF_MSG(Initial phase)

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

# Seriously butchered from glib...

SOCKET_POLL_MAJOR_VERSION=0
SOCKET_POLL_MINOR_VERSION=9
SOCKET_POLL_MICRO_VERSION=1
SOCKET_POLL_INTERFACE_AGE=1
SOCKET_POLL_BINARY_AGE=1
SOCKET_POLL_VERSION=$SOCKET_POLL_MAJOR_VERSION.$SOCKET_POLL_MINOR_VERSION.$SOCKET_POLL_MICRO_VERSION


# libtool versioning
LT_RELEASE=$SOCKET_POLL_MAJOR_VERSION.$SOCKET_POLL_MINOR_VERSION
LT_CURRENT=`expr $SOCKET_POLL_MICRO_VERSION - $SOCKET_POLL_INTERFACE_AGE`
LT_REVISION=$SOCKET_POLL_INTERFACE_AGE
LT_AGE=`expr $SOCKET_POLL_BINARY_AGE - $SOCKET_POLL_INTERFACE_AGE`
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

VERSION=$SOCKET_POLL_VERSION
PACKAGE=socket_poll

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)


#
# FIXME: Need to be able to check for ASCI and if not set... HAVE_NON_ASCII
#

AC_ISC_POSIX

AC_PROG_MAKE_SET
AC_PROG_CC
AC_EXEEXT

AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

TWOCAN_CONF_MSG(Checking location of programs)

AC_PATH_PROG(TRUE_PATH, true, /dev/null,
             $PATH:/bin:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

# Ignore autoheader
AUTOHEADER="$TRUE_PATH"

AC_PATH_PROG(GZIP_PATH, gzip, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)
AC_PATH_PROG(BZIP2_PATH, bzip2, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(SENDMAIL_PATH, sendmail, $TRUE_PATH,
             $PATH:/usr/sbin:/usr/lib)

AC_PATH_PROG(MAKE_PATH, gmake, make,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(ETAGS_PATH, etags, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(SED_PATH, sed, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(PERL_PATH, perl, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(TAR_PATH, tar, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(CHMOD_PATH, chmod, $TRUE_PATH,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

AC_PATH_PROG(GNOME_CONFIG_PATH, gnome-config, ${srcdir}/gnome-config-missing.sh,
             $PATH:/usr/bin:/bin:/usr/local/bin:/usr/gnu/bin:/usr/local/gnu/bin:/opt/gnu/bin)

WARNS=""
AC_ARG_ENABLE(debug, [  --enable-debug turn on debugging (assumes gcc/gdb) [default=no]],WARNS="-W -Wall -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-align -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline -O0 -ggdb3",AC_DEFINE(NDEBUG))
AC_SUBST(WARNS)

INST_GNOME_CONFIG_HACK="/"
AC_ARG_ENABLE(gnome-config, [  --disable-gnome-config turn off use of gnome-config data [default=enabled]],INST_GNOME_CONFIG_HACK="${srcdir}/src/.libs/",)

AC_SUBST(INST_GNOME_CONFIG_HACK)

TWOCAN_CONF_MSG(Checking for headers)

AC_HEADER_STDC
AC_HEADER_TIME

# AC_ARG_PROGRAM

AC_CHECK_HEADER(malloc.h, AC_DEFINE(HAVE_MALLOC_H))

# This needs to be a _lot_ better
#  For instance... doesn't work on 2.0.x kernels, with glibc-2.x.x
AC_CHECK_HEADER(sys/poll.h, AC_DEFINE(HAVE_SYS_POLL_H))

AC_CHECK_HEADER(sys/mman.h, AC_DEFINE(HAVE_SYS_MMAN_H))

AC_CHECK_HEADER(dlfcn.h, AC_DEFINE(HAVE_DLFCN_H))

AC_CHECK_HEADER(termcap.h, AC_DEFINE(HAVE_TERMCAP_H))

# Assume we can use if it is there
AC_CHECK_HEADER(sys/filio.h, AC_DEFINE(HAVE_SYS_FILIO_H))

AC_CHECK_HEADER(sys/uio.h, AC_DEFINE(HAVE_SYS_UIO_H))

AC_CHECK_HEADER(sys/un.h, AC_DEFINE(HAVE_SYS_UN_H))

AC_CHECK_HEADER(zlib.h, AC_DEFINE(HAVE_ZLIB_H))

AC_CHECK_HEADER(sys/prctl.h, AC_DEFINE(HAVE_SYS_PRCTL_H))

#  This needs to be improved. -- as we probably want to support the
# crappy FreeBSD version too (don't argue the interface is sick -- 
# hello TCP_CORK).
AC_CHECK_HEADER(sys/sendfile.h, AC_DEFINE(HAVE_SENDFILE))

TWOCAN_CONF_MSG(Checking for types, and defing if needed)

AC_C_CONST

AC_TYPE_SIGNAL

AC_TYPE_MODE_T

AC_TYPE_OFF_T

AC_TYPE_PID_T

AC_TYPE_SIZE_T

AC_TYPE_UID_T

AC_DEFUN(AC_TYPE_SOCKLEN_T,
[AC_CACHE_CHECK(for socklen_t in sys/socket.h, ac_cv_type_socklen_t,
[AC_EGREP_HEADER(socklen_t, sys/socket.h,
  ac_cv_type_socklen_t=yes, ac_cv_type_socklen_t=no)])
if test $ac_cv_type_socklen_t = no; then
  AC_DEFINE(socklen_t, int)
fi
])

AC_TYPE_SOCKLEN_T


TWOCAN_CONF_MSG(Checking for libraries to link against)


AC_CHECK_LIB(socket, main)
AC_SUBST(LIBS)

TWOCAN_CONF_MSG(Checking for functions)

AC_FUNC_MMAP
AC_FUNC_ALLOCA
# Maybe adds -lintl to LIBS.
AC_FUNC_STRFTIME
AC_FUNC_VFORK
AC_FUNC_VPRINTF
LIBOBJS=""
AC_FUNC_MEMCMP
if test "x$LIBOBJS" = "x"; then
 AC_DEFINE(HAVE_MEMCMP)
fi
LIBOBJS=""

# String functions...
AC_CHECK_FUNCS(memchr, AC_DEFINE(HAVE_MEMCHR),)
AC_CHECK_FUNCS(memcpy, AC_DEFINE(HAVE_MEMCPY),)
AC_CHECK_FUNCS(strspn, AC_DEFINE(HAVE_STRSPN),)
AC_CHECK_FUNCS(strcspn, AC_DEFINE(HAVE_STRCSPN),)
AC_CHECK_FUNCS(stpcpy, AC_DEFINE(HAVE_STPCPY),)
AC_CHECK_FUNCS(strncmp, AC_DEFINE(HAVE_STRNCMP),)
AC_CHECK_FUNCS(strcasecmp, AC_DEFINE(HAVE_STRCASECMP),)
AC_CHECK_FUNCS(strncasecmp, AC_DEFINE(HAVE_STRNCASECMP),)
AC_CHECK_FUNCS(strnlen, AC_DEFINE(HAVE_STRNLEN),)
AC_CHECK_FUNCS(strnchr, AC_DEFINE(HAVE_STRNCHR),)
AC_CHECK_FUNCS(asprintf, AC_DEFINE(HAVE_ASPRINTF),)

# Other functions...
AC_CHECK_FUNCS(getopt_long, AC_DEFINE(HAVE_GETOPT_LONG),)
AC_CHECK_FUNCS(sigemptyset, AC_DEFINE(HAVE_SIGEMPTYSET),)
AC_CHECK_FUNCS(difftime, AC_DEFINE(HAVE_DIFFTIME),)
AC_CHECK_FUNCS(sigaction, AC_DEFINE(HAVE_SIGACTION), 
                          AC_MSG_ERROR(Need sigaction))

AC_CHECK_FUNCS(inet_ntop, AC_DEFINE(HAVE_INET_NTOP),)
AC_CHECK_FUNCS(inet_ntoa, AC_DEFINE(HAVE_INET_NTOA),)
AC_CHECK_FUNCS(inet_pton, AC_DEFINE(HAVE_INET_PTON),)
AC_CHECK_FUNCS(inet_aton, AC_DEFINE(HAVE_INET_ATON),)
AC_CHECK_FUNCS(inet_addr, AC_DEFINE(HAVE_INET_ADDR),)

AC_CHECK_FUNCS(pread, AC_DEFINE(HAVE_PREAD),)

TWOCAN_CONF_MSG(Checking custom stuff, mainly does stuff exist/work)


AC_MSG_CHECKING(for an implementation of offsetof)
AC_CACHE_VAL(local_cv_has_offsetof,[
AC_TRY_RUN([
#include <stddef.h>
typedef struct abcd { int a; int b; } abcd;

int main() {
 int tmp = offsetof(abcd, b);
 return (0);
}],
local_cv_has_offsetof=yes,
local_cv_has_offsetof=no,
)])
AC_MSG_RESULT($local_cv_has_offsetof)
case x$local_cv_has_offsetof in
xyes) AC_DEFINE(HAVE_OFFSETOF) ;;
xno) AC_MSG_WARN(Trying local offsetof -- it might not work though)
esac

AC_MSG_CHECKING(for an implementation of strerror)
AC_CACHE_VAL(local_cv_has_strerror,[
AC_TRY_RUN([
#include <stddef.h>
#include <stdlib.h>
#include <errno.h>
const char *msg = NULL;

int main() {
 msg = strerror(0);
 return (0);
}],
local_cv_has_strerror=yes,
local_cv_has_strerror=no,
)])
AC_MSG_RESULT($local_cv_has_strerror)
case x$local_cv_has_strerror in
xyes) AC_DEFINE(HAVE_STRERROR) ;;
xno) AC_MSG_WARN(You won't get errno error messages.)
esac

AC_MSG_CHECKING(for an implementation of va_copy())
AC_CACHE_VAL(local_cv_has_va_copy,[
AC_TRY_RUN([
#include <stdarg.h>
void f (int i, ...)
{
va_list args1, args2;
va_start (args1, i);
va_copy (args2, args1);
if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
  exit (1);
va_end (args1); va_end (args2);
}
int main()
{
  f (0, 42);
  return 0;
}],
local_cv_has_va_copy=yes,
local_cv_has_va_copy=no,
)])
AC_MSG_RESULT($local_cv_has_va_copy)
case x$local_cv_has_va_copy in
xyes) AC_DEFINE(HAVE_VA_COPY)
esac

AC_MSG_CHECKING(for an implementation of __va_copy())
AC_CACHE_VAL(local_cv_has___va_copy,[
AC_TRY_RUN([
#include <stdarg.h>
void f (int i, ...)
{
va_list args1, args2;
va_start (args1, i);
__va_copy (args2, args1);
if (va_arg (args2, int) != 42 || va_arg (args1, int) != 42)
  exit (1);
va_end (args1); va_end (args2);
}
int main()
{
  f (0, 42);
  return 0;
}],
local_cv_has___va_copy=yes,
local_cv_has___va_copy=no,
)])
AC_MSG_RESULT($local_cv_has___va_copy)
case x$local_cv_has___va_copy in
xyes) AC_DEFINE(HAVE___VA_COPY)
esac

AC_MSG_CHECKING(for a _WORKING_ implementation of poll())
AC_CACHE_VAL(local_cv_has_poll,[
AC_TRY_RUN([
#include <sys/poll.h>
int main() {
 struct pollfd fds[3];
 fds[0].fd = 1;
 fds[1].fd = 2;
 fds[2].fd = 9999; /* some emulations don't work, Ie. glibc */
 fds[0].events = fds[1].events = fds[2].events = POLLIN|POLLOUT;
 fds[0].revents = fds[1].revents = fds[2].revents = 0;
 if (poll(fds, 3, 0) == -1)
   exit (1);
 if (!(fds[0].revents & POLLOUT))
   exit (2);
 if (fds[0].revents & (POLLERR|POLLNVAL|POLLHUP))
   exit (3);
 if (!(fds[1].revents & POLLOUT))
   exit (4);
 if (fds[1].revents & (POLLERR|POLLNVAL|POLLHUP))
   exit (5);
 if (!(fds[2].revents & (POLLERR|POLLNVAL|POLLHUP)))
   exit (6);
 return 0;
}],
local_cv_has_poll=yes,
local_cv_has_poll=no,
)])

AC_MSG_RESULT($local_cv_has_poll)
case x$local_cv_has_poll in
xyes) AC_DEFINE(HAVE_POLL)
esac

AC_MSG_CHECKING(for a posix version of sprintf())
AC_CACHE_VAL(local_cv_has_posix_sprintf,[
AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
int main() {
 char buffer[1024];
 if (sprintf(buffer, "%s%c%d\n", "abcd", ' ', 1) != 7)
  exit (1);
 return 0;
}],
local_cv_has_posix_sprintf=yes,
local_cv_has_posix_sprintf=no,
)])
AC_MSG_RESULT($local_cv_has_posix_sprintf)
case x$local_cv_has_posix_sprintf in
xyes) AC_DEFINE(HAVE_POSIX_SPRINTF)
esac

AC_MSG_CHECKING(for a posix version of vsprintf())
AC_CACHE_VAL(local_cv_has_posix_vsprintf,[
AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
int func(char *buffer, const char *fmt, ...)
{
 int ret = 0;
 va_list ap;
 
 va_start(ap, fmt);

 ret = vsprintf(buffer, fmt, ap);
         
 va_end(ap);

 return (ret);
}
int main() {
 char buffer[1024];
 if (func(buffer, "%s%c%d\n", "abcd", ' ', 1) != 7)
  exit (1);
 return 0;
}],
local_cv_has_posix_vsprintf=yes,
local_cv_has_posix_vsprintf=no,
)])
AC_MSG_RESULT($local_cv_has_posix_vsprintf)
case x$local_cv_has_posix_vsprintf in
xyes) AC_DEFINE(HAVE_POSIX_VSPRINTF)
esac

AC_MSG_CHECKING(for a writev that we can use)
AC_CACHE_VAL(local_cv_has_writev,[
AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
#include <sys/uio.h>
#define MAX_SZ 1024
int main() {
 struct iovec iovs[MAX_SZ];
 int count = 0;

 while (count < MAX_SZ)
 {
  iovs[count].iov_base = ".";
  iovs[count].iov_len = 1;
  ++count;
 }
 iovs[MAX_SZ - 1].iov_base = "\n";
 iovs[MAX_SZ - 1].iov_len = 1;

 if (write(2, iovs, MAX_SZ) != MAX_SZ)
   exit (1);
 return 0;
}],
local_cv_has_writev=yes,
local_cv_has_writev=no,
)])
AC_MSG_RESULT($local_cv_has_writev)
case x$local_cv_has_writev in
xyes) AC_DEFINE(HAVE_WRITEV)
esac

AC_MSG_CHECKING(for a RTLD_GLOBAL def)
AC_CACHE_VAL(local_cv_has_dl_rtld_global,[
AC_TRY_RUN([
#include <stdlib.h>
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

int main() {
 int tmp = RTLD_GLOBAL;
 return 0;
}],
local_cv_has_dl_rtld_global=yes,
local_cv_has_dl_rtld_global=no,
)])
AC_MSG_RESULT($local_cv_has_dl_rtld_global)
case x$local_cv_has_dl_rtld_global in
xyes) AC_DEFINE(HAVE_DL_RTLD_GLOBAL)
esac

AC_MSG_CHECKING(for a C9x compat. snprintf)
AC_CACHE_VAL(local_cv_has_C9x_snprintf,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>

int main() {
 char buffer[4];
 int tmp = snprintf(buffer, 4, "%s", "123456");

 if ((tmp > 0) && (tmp < 4))
  exit (1);

 if (!( (buffer[0] == '1') && (buffer[1] == '2') && (buffer[2] == '3') &&
        (buffer[3] == 0) ))
  exit (1);
 return 0;
}],
local_cv_has_C9x_snprintf=yes,
local_cv_has_C9x_snprintf=no,
)])
AC_MSG_RESULT($local_cv_has_C9x_snprintf)
case x$local_cv_has_C9x_snprintf in
xyes) AC_DEFINE(HAVE_C9X_SNPRINTF)
esac

AC_MSG_CHECKING(if char works as a bitflag type)
AC_CACHE_VAL(local_cv_has_char_bitflag,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>

typedef struct abcd {
 int num;

 unsigned char one : 1;
 unsigned char two : 1;
 unsigned char three : 1;
 unsigned char four : 1;
 unsigned char five : 1;
 unsigned char six : 1;
 unsigned char seven : 1;
 unsigned char eight : 1;
} abcd;

int main() {
  abcd tmp = {8, 0, 0, 0, 0, 1, 1, 1, 1};

 if ((tmp.num != 8) || tmp.one || tmp.two || tmp.three || tmp.four
     || !tmp.five || !tmp.six || !tmp.seven || !tmp.eight)
  exit (1);

 return 0;
}],
local_cv_has_char_bitflag=yes,
local_cv_has_char_bitflag=no,
)])
AC_MSG_RESULT($local_cv_has_char_bitflag)
case x$local_cv_has_char_bitflag in
xyes) AC_DEFINE(HAVE_CHAR_BITFLAG)
esac

AC_MSG_CHECKING(if setrlimit/getrlimit work)
AC_CACHE_VAL(local_cv_has_setrlimit,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <unistd.h>

int main() {

 struct rlimit tmp;
 getrlimit(RLIMIT_CORE, &tmp);
 tmp.rlim_cur = RLIM_INFINITY;
 setrlimit(RLIMIT_CORE, &tmp);
}],
local_cv_has_setrlimit=yes,
local_cv_has_setrlimit=no,
)])
AC_MSG_RESULT($local_cv_has_setrlimit)
case x$local_cv_has_setrlimit in
xyes) AC_DEFINE(HAVE_SETRLIMIT)
esac

AC_MSG_CHECKING(for prctl)
AC_CACHE_VAL(local_cv_has_prctl,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <stdio.h>

#define PR_SET_PDEATHSIG 1

int main() {
 prctl(PR_SET_PDEATHSIG, 9, 0, 0, 0);
 return (0);
}],
local_cv_has_prctl=yes,
local_cv_has_prctl=no,
)])
AC_MSG_RESULT($local_cv_has_prctl)
case x$local_cv_has_prctl in
xyes) AC_DEFINE(HAVE_PRCTL)
esac

AC_MSG_CHECKING(for linux compat sigcontext)
AC_CACHE_VAL(local_cv_has_sigcontext,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <sys/time.h>
#include <signal.h>

int main() {
  struct sigcontext con;

       con.gs = 0; con.__gsh = 0;
       con.fs = 0; con.__fsh = 0;
       con.es = 0; con.__esh = 0;
       con.ds = 0; con.__dsh = 0;
       con.edi = 0;
       con.esi = 0;
       con.ebp = 0;
       con.esp = 0;
       con.ebx = 0;
       con.edx = 0;
       con.ecx = 0;
       con.eax = 0;
       con.trapno = 0;
       con.err = 0;
       con.eip = 0;
       con.cs = 0; con.__csh = 0;
       con.eflags = 0;
       con.esp_at_signal = 0;
       con.ss = 0; con.__ssh = 0;
       con.fpstate = 0;
       con.fpstate ?
        (con.fpstate->status = 0) : 0;
       con.oldmask = 0;
       con.cr2 = 0;


 return 0;
}],
local_cv_has_sigcontext=yes,
local_cv_has_sigcontext=no,
)])
AC_MSG_RESULT($local_cv_has_sigcontext)
case x$local_cv_has_sigcontext in
xyes) AC_DEFINE(HAVE_SIGCONTEXT)
esac

AC_MSG_CHECKING(for _old_ linux compat sigcontext)
AC_CACHE_VAL(local_cv_has_old_sigcontext,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <sys/time.h>
#include <signal.h>
#include <asm/sigcontext.h>

#define sigcontext sigcontext_struct

int main() {
  struct sigcontext con;

       con.gs = 0; con.__gsh = 0;
       con.fs = 0; con.__fsh = 0;
       con.es = 0; con.__esh = 0;
       con.ds = 0; con.__dsh = 0;
       con.edi = 0;
       con.esi = 0;
       con.ebp = 0;
       con.esp = 0;
       con.ebx = 0;
       con.edx = 0;
       con.ecx = 0;
       con.eax = 0;
       con.trapno = 0;
       con.err = 0;
       con.eip = 0;
       con.cs = 0; con.__csh = 0;
       con.eflags = 0;
       con.esp_at_signal = 0;
       con.ss = 0; con.__ssh = 0;
       con.fpstate = 0;
       con.fpstate ?
        (con.fpstate->status = 0) : 0;
       con.oldmask = 0;
       con.cr2 = 0;


 return 0;
}],
local_cv_has_old_sigcontext=yes,
local_cv_has_old_sigcontext=no,
)])
AC_MSG_RESULT($local_cv_has_old_sigcontext)
case x$local_cv_has_old_sigcontext in
xyes) AC_DEFINE(HAVE_OLD_SIGCONTEXT)
esac

AC_MSG_CHECKING(for mallinfo)
AC_CACHE_VAL(local_cv_has_mallinfo,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <malloc.h>

int main() {
 struct mallinfo mem_info = mallinfo(); /* produces a warning */
 mem_info.arena = 0;
 mem_info.ordblks = 0;
 mem_info.smblks = 0;
 mem_info.hblks = 0;
 mem_info.hblkhd = 0;
 mem_info.usmblks = 0;
 mem_info.fsmblks = 0;
 mem_info.uordblks = 0;
 mem_info.fordblks = 0;
 mem_info.keepcost = 0;

 return (0);
}],
local_cv_has_mallinfo=yes,
local_cv_has_mallinfo=no,
)])
AC_MSG_RESULT($local_cv_has_mallinfo)
case x$local_cv_has_mallinfo in
xyes) AC_DEFINE(HAVE_MALLINFO)
esac

AC_MSG_CHECKING(for termcap variables)
AC_CACHE_VAL(local_cv_has_decl_termcap_vars,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>

#include <termcap.h>

int main() {
 PC = 0;
 ospeed = 0;

 return (0);
}],
local_cv_has_decl_termcap_vars=yes,
local_cv_has_decl_termcap_vars=no,
)])
AC_MSG_RESULT($local_cv_has_decl_termcap_vars)
case x$local_cv_has_decl_termcap_vars in
xyes) AC_DEFINE(HAVE_DECL_TERMCAP_VARS)
esac

AC_MSG_CHECKING(for time_t as int's)
AC_CACHE_VAL(local_cv_use_quick_add_time,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <sys/time.h>
#include <time.h>

int main() {
 time_t abcd = time(NULL);
 time_t abcd2 = abcd + 234;
 struct tm *tm = localtime(&abcd);
 
 tm->tm_sec += 234;
 if (abcd2 != mktime(tm)) exit (1);

 return 0;
}],
local_cv_use_quick_add_time=yes,
local_cv_use_quick_add_time=no,
)])
AC_MSG_RESULT($local_cv_use_quick_add_time)
case x$local_cv_use_quick_add_time in
xyes) AC_DEFINE(USE_QUICK_ADD_TIME)
esac

AC_MSG_CHECKING(for usable sigaltstack)
AC_CACHE_VAL(local_cv_have_sigaltstack,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stdlib.h>
#include <signal.h>

int main() {
 char buffer[SIGSTKSZ];
 struct sigaltstack alt_stack;
 int abcd = SA_ONSTACK;

 alt_stack.ss_size = SIGSTKSZ;
 alt_stack.ss_sp = buffer;

 sigaltstack(&alt_stack, NULL);

 return (0);
}],
local_cv_have_sigaltstack=yes,
local_cv_have_sigaltstack=no,
)])
AC_MSG_RESULT($local_cv_have_sigaltstack)
case x$local_cv_have_sigaltstack in
xyes) AC_DEFINE(HAVE_SIGALTSTACK)
esac

AC_MSG_CHECKING(for C9x struct hack support)
AC_CACHE_VAL(local_cv_have_C9x_struct_hack,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>

struct abcd
{
 int len;
 char buffer[];
};

int main() {
 struct abcd *abcd = malloc(sizeof(struct abcd) + 256);

 abcd->len = 256;
 memset(abcd->buffer, 0, 256);
 return (0);
}],
local_cv_have_C9x_struct_hack=yes,
local_cv_have_C9x_struct_hack=no,
)])
AC_MSG_RESULT($local_cv_have_C9x_struct_hack)
case x$local_cv_have_C9x_struct_hack in
xyes) AC_DEFINE(HAVE_C9x_STRUCT_HACK)
esac

AC_MSG_CHECKING(for cmsghdr struct)
AC_CACHE_VAL(local_cv_have_struct_cmsghdr,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#ifdef HAVE_SYS_UN_H
# include <sys/un.h>
#endif

struct abcd
{
 struct cmsghdr cmsg;
 int fd;
};

int main() {
 struct abcd abcd;

 abcd.cmsg.cmsg_len = 0;
 abcd.cmsg.cmsg_level = SOL_SOCKET;
 abcd.cmsg.cmsg_type = 0;

 return (0);
}],
local_cv_have_struct_cmsghdr=yes,
local_cv_have_struct_cmsghdr=no,
)])
AC_MSG_RESULT($local_cv_have_struct_cmsghdr)
case x$local_cv_have_struct_cmsghdr in
xyes) AC_DEFINE(HAVE_CMSGHDR_STRUCT) 
esac

AC_MSG_CHECKING(for fd passing in cmsghdr)
AC_CACHE_VAL(local_cv_have_cmsghdr_rights,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#ifdef HAVE_SYS_UN_H
# include <sys/un.h>
#endif

struct abcd
{
 struct cmsghdr cmsg;
 int fd;
};

int main() {
 struct abcd abcd;

 abcd.cmsg.cmsg_len = 0;
 abcd.cmsg.cmsg_level = SOL_SOCKET;
 abcd.cmsg.cmsg_type = SCM_RIGHTS;

 return (0);
}],
local_cv_have_cmsghdr_rights=yes,
local_cv_have_cmsghdr_rights=no,
)])
AC_MSG_RESULT($local_cv_have_cmsghdr_rights)
case x$local_cv_have_cmsghdr_rights in
xyes) AC_DEFINE(HAVE_CMSGHDR_RIGHTS)
esac

AC_MSG_CHECKING(for credentials passing in cmsghdr)
AC_CACHE_VAL(local_cv_have_cmsghdr_credentials,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#ifdef HAVE_SYS_UN_H
# include <sys/un.h>
#endif

struct abcd
{
 struct cmsghdr cmsg;
 int fd;
};

int main() {
 struct abcd abcd;

 abcd.cmsg.cmsg_len = 0;
 abcd.cmsg.cmsg_level = SOL_SOCKET;
 abcd.cmsg.cmsg_type = SCM_CREDENTIALS;

 return (0);
}],
local_cv_have_cmsghdr_credentials=yes,
local_cv_have_cmsghdr_credentials=no,
)])
AC_MSG_RESULT($local_cv_have_cmsghdr_credentials)
case x$local_cv_have_cmsghdr_credentials in
xyes) AC_DEFINE(HAVE_CMSGHDR_CREDENTIALS) 
esac

AC_MSG_CHECKING(for credentials passing in setsockopt)
AC_CACHE_VAL(local_cv_have_so_peercreds,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>

int main() {
 int val1 = SOL_SOCKET;
 int val2 = SO_PEERCRED;

 return (0);
}],
local_cv_have_so_peercreds=yes,
local_cv_have_so_peercreds=no,
)])
AC_MSG_RESULT($local_cv_have_so_peercreds)
case x$local_cv_have_so_peercreds in
xyes) AC_DEFINE(HAVE_SO_PEERCREDS)
esac

AC_MSG_CHECKING(for CMSG_DATA macro)
AC_CACHE_VAL(local_cv_have_cmsg_data,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#ifdef HAVE_SYS_UN_H
# include <sys/un.h>
#endif

struct abcd
{
 struct cmsghdr cmsg;
 int fd;
};

int main() {
 struct abcd abcd;
 char *tmp = CMSG_DATA(&abcd.cmsg);

 return (0);
}],
local_cv_have_cmsg_data=yes,
local_cv_have_cmsg_data=no,
)])
AC_MSG_RESULT($local_cv_have_cmsg_data)
case x$local_cv_have_cmsg_data in
xyes) AC_DEFINE(HAVE_CMSG_DATA)
esac

AC_MSG_CHECKING(for TCP_CORK socket option)
AC_CACHE_VAL(local_cv_have_tcp_cork,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/tcp.h>

int main() {
 int val1 = SOL_TCP;
 int val2 = TCP_CORK;

 return (0);
}],
local_cv_have_tcp_cork=yes,
local_cv_have_tcp_cork=no,
)])
AC_MSG_RESULT($local_cv_have_tcp_cork)
case x$local_cv_have_tcp_cork in
xyes) AC_DEFINE(HAVE_TCP_CORK)
esac

AC_MSG_CHECKING(for ipv6 sockaddr structure)
AC_CACHE_VAL(local_cv_have_sockaddr_in6,[
AC_TRY_RUN([
#define _GNU_SOURCE
#include <stddef.h>
#include <sys/socket.h>
#include <netinet/in.h>

int main() {
 struct sockaddr_in6 sa_in6;
 return (0);
}],
local_cv_have_sockaddr_in6=yes,
local_cv_have_sockaddr_in6=no,
)])
AC_MSG_RESULT($local_cv_have_sockaddr_in6)
case x$local_cv_have_sockaddr_in6 in
xyes) AC_DEFINE(HAVE_SOCKADDR_IN6)
esac


TWOCAN_CONF_MSG(Output Substitution)

SOCKET_POLL_LIBDIR="-L${libdir}"
SOCKET_POLL_INCLUDEDIR="-I${includedir}"
SOCKET_POLL_LIBS="$LIBS"

AC_SUBST(SOCKET_POLL_LIBDIR)
AC_SUBST(SOCKET_POLL_INCLUDEDIR)
AC_SUBST(SOCKET_POLL_LIBS)

AC_OUTPUT([Makefile 
           gnome-config-missing.sh
           src/Makefile
           include/Makefile
           Documentation/Makefile
           socket_poll.spec
])

$SED_PATH 's%^#define *%#define SOCKET_POLL_AUTOCONF_%' < include/autoconf.h > include/socket_poll-conf.h

